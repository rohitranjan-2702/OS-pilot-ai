generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  created_at    DateTime? @default(now())
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  chat          Chat[]
}

model Chat{
  chat_id       String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  userId        String   @db.ObjectId
  user User @relation(fields: [userId], references:[id])
  message Message[]
}

model Message{
  message_id    String    @id @default(auto()) @map("_id") @db.ObjectId
  text          String
  author        Role[]
  createdAt     DateTime @default(now())
  chatId        String   @db.ObjectId
  chat          Chat     @relation(fields:[chatId],references:[chat_id])
}

enum Role {
  USER
  BOT
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String   @db.String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project{
  pro_id            String    @id @default(auto()) @map("_id") @db.ObjectId
  proName           String
  proDesc           String
  techStack         Json[]
  proURL            String
  stars             Int
  proIssue          Issue[]
  createdAt         DateTime @default(now())
}

model Issue{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  openData      String
  description   String
  URL           String
  projectId     String   @db.ObjectId
  project       Project @relation(fields:[projectId],references: [pro_id])
  createdAt     DateTime @default(now())
}